{"version":3,"sources":["../node_modules/peerjs/dist sync","pages/Index.tsx","pages/Loading.tsx","lib/Client.ts","lib/Server.ts","pages/Room.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Index","useState","roomId","setRoomId","onSubmit","preventDefault","window","location","href","type","name","onChange","target","value","Loading","Client","connection","this","on","data","console","debug","send","myNameIs","Server","peer","connections","addConnection","message","forEach","sendToAll","push","config","tryToServe","a","Promise","reject","Peer","log","tryToJoin","undefined","_id","conn","connect","Room","connectionHandler","setConnectionHandler","useEffect","catch","setMyName","App","room","setRoom","URLSearchParams","search","get","mainComponent","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0JAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,yGCNV,SAASC,IAAS,IAAD,EACFC,mBAAiB,IADf,mBACvBC,EADuB,KACfC,EADe,KAQ9B,OACE,6CAEE,sBAAMC,SARV,SAAkBZ,GAChBA,EAAEa,iBACFC,OAAOC,SAASC,KAAhB,gBAAgCN,IAM9B,SACE,uBACEO,KAAK,OACLC,KAAK,SACLC,SAAU,SAACnB,GAAD,OAAOW,EAAUX,EAAEoB,OAAOC,eCjB/B,SAASC,IACtB,OAAO,+C,yDCEYC,E,WAGnB,WAAYC,GAAkC,yBAF9CA,gBAE6C,EAC3CC,KAAKD,WAAaA,EAElBC,KAAKD,WAAWE,GAAG,QAAQ,SAACC,GAC1BC,QAAQC,MAAM,YAAaF,M,iDAG/B,c,uBAEA,SAAUT,GACRO,KAAKD,WAAWM,KAAK,CAAEC,SAAUb,Q,KCbhBc,E,WAInB,WAAYC,GAAa,IAAD,gCAHxBA,UAGwB,OAFxBC,YAAqC,GAGnCT,KAAKQ,KAAOA,EACZR,KAAKQ,KAAKP,GAAG,cAAc,SAACF,GAC1B,EAAKW,cAAcX,M,6CAIvB,SAAkBY,GAChBX,KAAKS,YAAYG,SAAQ,SAACb,GACxBA,EAAWM,KAAKM,Q,uBAIpB,SAAUlB,GACRO,KAAKa,UAAU,CAAEP,SAAUb,M,2BAG7B,SAAcM,GACZC,KAAKS,YAAYK,KAAKf,GACtBI,QAAQC,MAAM,iBAAkBL,GAChCA,EAAWE,GAAG,QAAQ,SAACC,GACrBC,QAAQC,MAAM,YAAaF,U,KCtB3Ba,EAA4B,G,SAEnBC,E,8EAAf,WAA0BlC,GAA1B,SAAAmC,EAAA,+EACS,IAAIC,SAAQ,SAACvC,EAASwC,GAC3B,IAAMX,EAAO,IAAIY,IAAJ,6BAA+BtC,GAAMiC,GAClDP,EAAKP,GAAG,QAAQ,SAAUnB,GACxBqB,QAAQkB,IAAI,kBAAoBvC,GAChCH,EAAQ,IAAI4B,EAAOC,OAErBA,EAAKP,GAAG,SAAS,SAAC1B,GAChB4C,WARN,4C,+BAaeG,E,8EAAf,WAAyBxC,GAAzB,SAAAmC,EAAA,+EACS,IAAIC,SAAQ,SAACvC,EAASwC,GAC3B,IAAMX,EAAO,IAAIY,SAAKG,EAAWR,GACjCP,EAAKP,GAAG,QAAQ,SAAUuB,GACxBrB,QAAQkB,IAAI,sBAAwBG,GACpC,IAAIC,EAAOjB,EAAKkB,QAAL,6BAAmC5C,IAC9C2C,EAAKxB,GAAG,QAAQ,WACdE,QAAQC,MAAM,qBACdzB,EAAQ,IAAImB,EAAO2B,OAErBA,EAAKxB,GAAG,SAAS,SAAC1B,GAChB4B,QAAQC,MAAM,QAAS7B,GACvB4C,cAZR,4C,sBAwBe,SAASQ,EAAT,GAAuC,IAAvB7C,EAAsB,EAAtBA,GAAsB,EACDE,wBAEhDuC,GAHiD,mBAC5CK,EAD4C,KACzBC,EADyB,KAanD,OARAC,qBAAU,WAAM,4CAEd,sBAAAb,EAAA,kEACEY,EADF,SAC6Bb,EAAWlC,GAAIiD,OAAM,kBAAMT,EAAUxC,MADlE,8EAFc,sBACV8C,GADU,mCAKdF,KACC,CAACE,EAAmB9C,IAGrB,8CACSA,EACP,uBACA,uBACEU,KAAK,OACLC,KAAK,OACLC,SAAU,SAACnB,GAAD,OA1BDkB,EA0BgBlB,EAAEoB,OAAOC,YA1BXG,EA0BkB6B,IAvB/C7B,EAAWiC,UAAUvC,IAHP,IAACA,EAAcM,QCdhBkC,MAnBf,WAAgB,IAAD,EACWjD,wBAAoCuC,GAD/C,mBACNW,EADM,KACAC,EADA,KAGbL,qBAAU,WACRK,EAAQ,IAAIC,gBAAgB/C,OAAOC,SAAS+C,QAAQC,IAAI,WACvD,IAEH,IAAMC,EACK,OAATL,EACE,cAACnD,EAAD,SACWwC,IAATW,EACF,cAACrC,EAAD,IAEA,cAAC8B,EAAD,CAAM7C,GAAIoD,IAGd,OAAO,qBAAKM,UAAU,MAAf,SAAsBD,KCRhBE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86705324.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 18;","import React, { useState } from \"react\";\n\nexport default function Index() {\n  const [roomId, setRoomId] = useState<string>(\"\");\n\n  function onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    window.location.href = `?room=${roomId}`;\n  }\n\n  return (\n    <>\n      Start\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          name=\"roomId\"\n          onChange={(e) => setRoomId(e.target.value)}\n        />\n      </form>\n    </>\n  );\n}\n","export default function Loading() {\n  return <>Loading</>;\n}\n","import Peer from \"peerjs\";\nimport { IMessageHandler } from \"./IMessageHandler\";\n\nexport default class Client implements IMessageHandler {\n  connection: Peer.DataConnection;\n\n  constructor(connection: Peer.DataConnection) {\n    this.connection = connection;\n\n    this.connection.on(\"data\", (data) => {\n      console.debug(\"Got data:\", data);\n    });\n  }\n  addConnection(): void {}\n\n  setMyName(name: string): void {\n    this.connection.send({ myNameIs: name });\n  }\n}\n","import Peer from \"peerjs\";\nimport { IMessageHandler } from \"./IMessageHandler\";\n\nexport default class Server implements IMessageHandler {\n  peer: Peer;\n  connections: Peer.DataConnection[] = [];\n\n  constructor(peer: Peer) {\n    this.peer = peer;\n    this.peer.on(\"connection\", (connection) => {\n      this.addConnection(connection);\n    });\n  }\n\n  private sendToAll(message: Object) {\n    this.connections.forEach((connection) => {\n      connection.send(message);\n    });\n  }\n\n  setMyName(name: string): void {\n    this.sendToAll({ myNameIs: name });\n  }\n\n  addConnection(connection: Peer.DataConnection): void {\n    this.connections.push(connection);\n    console.debug(\"new connection\", connection);\n    connection.on(\"data\", (data) => {\n      console.debug(\"Got data:\", data);\n    });\n  }\n}\n","import Peer from \"peerjs\";\nimport { useEffect, useState } from \"react\";\nimport Client from \"../lib/Client\";\nimport { IMessageHandler } from \"../lib/IMessageHandler\";\nimport Server from \"../lib/Server\";\n\nconst config: Peer.PeerJSOption = {};\n\nasync function tryToServe(id: string): Promise<IMessageHandler> {\n  return new Promise((resolve, reject) => {\n    const peer = new Peer(`remote-scrum-cards-${id}`, config);\n    peer.on(\"open\", function (id) {\n      console.log(\"My peer ID is: \" + id);\n      resolve(new Server(peer));\n    });\n    peer.on(\"error\", (e) => {\n      reject();\n    });\n  });\n}\n\nasync function tryToJoin(id: string): Promise<IMessageHandler> {\n  return new Promise((resolve, reject) => {\n    const peer = new Peer(undefined, config);\n    peer.on(\"open\", function (_id) {\n      console.log(\"My peer ID is now: \" + _id);\n      var conn = peer.connect(`remote-scrum-cards-${id}`);\n      conn.on(\"open\", () => {\n        console.debug(\"Opened connection\");\n        resolve(new Client(conn));\n      });\n      conn.on(\"error\", (e) => {\n        console.debug(\"error\", e);\n        reject();\n      });\n    });\n  });\n}\n\nconst setName = (name: string, connection?: IMessageHandler) => {\n  if (!connection) return;\n\n  connection.setMyName(name);\n};\n\nexport default function Room({ id }: { id: string }) {\n  const [connectionHandler, setConnectionHandler] = useState<\n    IMessageHandler | undefined\n  >(undefined);\n\n  useEffect(() => {\n    if (connectionHandler) return;\n    async function connect() {\n      setConnectionHandler(await tryToServe(id).catch(() => tryToJoin(id)));\n    }\n    connect();\n  }, [connectionHandler, id]);\n\n  return (\n    <>\n      I rum {id}\n      <br />\n      <input\n        type=\"text\"\n        name=\"name\"\n        onChange={(e) => setName(e.target.value, connectionHandler)}\n      />\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Index from \"./pages/Index\";\nimport Loading from \"./pages/Loading\";\nimport Room from \"./pages/Room\";\n\nfunction App() {\n  const [room, setRoom] = useState<string | null | undefined>(undefined);\n  // new URLSearchParams(window.location.search).get(\"room\"));\n  useEffect(() => {\n    setRoom(new URLSearchParams(window.location.search).get(\"room\"));\n  }, []);\n\n  const mainComponent =\n    room === null ? (\n      <Index />\n    ) : room === undefined ? (\n      <Loading />\n    ) : (\n      <Room id={room} />\n    );\n\n  return <div className=\"App\">{mainComponent}</div>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}